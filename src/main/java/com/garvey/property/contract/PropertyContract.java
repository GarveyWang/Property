package com.garvey.property.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class PropertyContract extends Contract {
    private static final String BINARY = "6080604052600a8054603260ff199091161764ffffffff0019166103001790553480156200002c57600080fd5b506040516200399538038062003995833981016040908152815160208301519183015190830192918201910162000071838383610fff6401000000006200007a810204565b505050620002d1565b62000084620001ff565b5060408051608081018252858152602080820186905281830185905261ffff84166060830152600160a060020a0333166000908152808252929092208151805192938493620000d792849201906200022c565b506020828101518051620000f292600185019201906200022c565b5060408201518051620001109160028401916020909101906200022c565b5060608201518160030160006101000a81548161ffff021916908361ffff160217905550905050336001856040518082805190602001908083835b602083106200016c5780518252601f1990920191602091820191016200014b565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092208054600160a060020a0319908116600160a060020a0395861617909155600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054909116339094169390931790925550505050505050565b608060405190810160405280606081526020016060815260200160608152602001600061ffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200026f57805160ff19168380011785556200029f565b828001600101855582156200029f579182015b828111156200029f57825182559160200191906001019062000282565b50620002ad929150620002b1565b5090565b620002ce91905b80821115620002ad5760008155600101620002b8565b90565b6136b480620002e16000396000f3006080604052600436106101b25763ffffffff60e060020a6000350416625843b481146101b75780630c2982931461024d57806310857e411461037e5780633250c6261461047157806357346243146104ca5780635ed0c344146104e75780635fabcaaf146104fc5780635fce88fe1461053457806365ec1a8b146106635780636667873f146106c357806369a48869146106e15780636d51f6a3146107415780637a81bfac146108b75780637eea39e3146108cc578063835ddcc1146109fb578063848a19d314610a105780638886494914610a2557806389040e5914610c095780638ccab82b14610c2a578063ad15aad214610c83578063b086f1b814610eea578063b2c2f2e814610eff578063b3c37de214610f17578063b5cb15f714611128578063bad68d0f1461113d578063bfe4f78814611175578063c53eb5b9146111a0578063cdc77f98146111b8578063d0543ddc146111cd578063d9dcba38146111e8578063eace61b21461120c578063ead0327d146112eb578063eada609d1461130c578063eb29a74a146114d1578063ecca031f146114e9578063f16e4e4614611501578063ff5d32fe14611522575b600080fd5b3480156101c357600080fd5b506101d8600160a060020a036004351661153a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102125781810151838201526020016101fa565b50505050905090810190601f16801561023f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261036c94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff16935061160392505050565b60408051918252519081900360200190f35b34801561038a57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261045d95833562ffffff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506117939650505050505050565b604080519115158252519081900360200190f35b34801561047d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261045d94369492936024939284019190819084018382808284375094975061182f9650505050505050565b3480156104d657600080fd5b506104e560ff6004351661189d565b005b3480156104f357600080fd5b5061036c6118e6565b34801561050857600080fd5b5061051d600160a060020a03600435166118ed565b6040805161ffff9092168252519081900360200190f35b34801561054057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261036c94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b67ffffffffffffffff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff16935061190f92505050565b34801561066f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104e59436949293602493928401919081908401838280828437509497505050923562ffffff169350611ad992505050565b3480156106cf57600080fd5b506104e563ffffffff60043516611bfc565b3480156106ed57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104e59436949293602493928401919081908401838280828437509497505050923562ffffff169350611c4192505050565b34801561074d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261036c94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a893567ffffffffffffffff169a8a83013515159a919990985060609091019650919450908101925081908401838280828437509497505050923567ffffffffffffffff169350611d1a92505050565b3480156108c357600080fd5b5061036c611f71565b3480156108d857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261036c94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b67ffffffffffffffff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff169350611f7792505050565b348015610a0757600080fd5b5061036c612049565b348015610a1c57600080fd5b5061036c61204f565b348015610a3157600080fd5b50610a3d600435612055565b60408051600160a060020a038416608082015267ffffffffffffffff831660a082015260c0808252885190820152875190918291602080840192840191606085019160e0860191908d019080838360005b83811015610aa6578181015183820152602001610a8e565b50505050905090810190601f168015610ad35780820380516001836020036101000a031916815260200191505b5085810384528a5181528a516020918201918c019080838360005b83811015610b06578181015183820152602001610aee565b50505050905090810190601f168015610b335780820380516001836020036101000a031916815260200191505b5085810383528951815289516020918201918b019080838360005b83811015610b66578181015183820152602001610b4e565b50505050905090810190601f168015610b935780820380516001836020036101000a031916815260200191505b5085810382528851815288516020918201918a019080838360005b83811015610bc6578181015183820152602001610bae565b50505050905090810190601f168015610bf35780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b348015610c1557600080fd5b506101d8600160a060020a0360043516612302565b348015610c3657600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261045d9436949293602493928401919081908401838280828437509497506123749650505050505050565b348015610c8f57600080fd5b50610c9b6004356123a7565b604051808060200180602001806020018060200189600160a060020a0316600160a060020a031681526020018867ffffffffffffffff1667ffffffffffffffff168152602001871515151581526020018060200186810386528e818151815260200191508051906020019080838360005b83811015610d24578181015183820152602001610d0c565b50505050905090810190601f168015610d515780820380516001836020036101000a031916815260200191505b5086810385528d5181528d516020918201918f019080838360005b83811015610d84578181015183820152602001610d6c565b50505050905090810190601f168015610db15780820380516001836020036101000a031916815260200191505b5086810384528c5181528c516020918201918e019080838360005b83811015610de4578181015183820152602001610dcc565b50505050905090810190601f168015610e115780820380516001836020036101000a031916815260200191505b5086810383528b5181528b516020918201918d019080838360005b83811015610e44578181015183820152602001610e2c565b50505050905090810190601f168015610e715780820380516001836020036101000a031916815260200191505b50868103825287518152875160209182019189019080838360005b83811015610ea4578181015183820152602001610e8c565b50505050905090810190601f168015610ed15780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b348015610ef657600080fd5b5061036c6126fd565b348015610f0b57600080fd5b5061036c600435612703565b348015610f2357600080fd5b50610f2f600435612745565b604051808060200188600160a060020a0316600160a060020a031681526020018767ffffffffffffffff1667ffffffffffffffff1681526020018060200180602001806020018667ffffffffffffffff1667ffffffffffffffff16815260200185810385528c818151815260200191508051906020019080838360005b83811015610fc4578181015183820152602001610fac565b50505050905090810190601f168015610ff15780820380516001836020036101000a031916815260200191505b5085810384528951815289516020918201918b019080838360005b8381101561102457818101518382015260200161100c565b50505050905090810190601f1680156110515780820380516001836020036101000a031916815260200191505b5085810383528851815288516020918201918a019080838360005b8381101561108457818101518382015260200161106c565b50505050905090810190601f1680156110b15780820380516001836020036101000a031916815260200191505b50858103825287518152875160209182019189019080838360005b838110156110e45781810151838201526020016110cc565b50505050905090810190601f1680156111115780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561113457600080fd5b5061036c612a02565b34801561114957600080fd5b5061115c60043561ffff60243516612a08565b6040805163ffffffff9092168252519081900360200190f35b34801561118157600080fd5b5061118a612a6f565b6040805160ff9092168252519081900360200190f35b3480156111ac57600080fd5b50610f2f600435612a78565b3480156111c457600080fd5b5061115c612a94565b3480156111d957600080fd5b5061051d600435602435612aa5565b3480156111f457600080fd5b506104e560043561ffff602435166044351515612b37565b34801561121857600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261045d95833562ffffff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612e2c9650505050505050565b3480156112f757600080fd5b506101d8600160a060020a0360043516612ec1565b34801561131857600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452611365943694929360249392840191908190840183828082843750949750612f399650505050505050565b6040518086600160a060020a0316600160a060020a031681526020018060200180602001806020018561ffff1661ffff168152602001848103845288818151815260200191508051906020019080838360005b838110156113d05781810151838201526020016113b8565b50505050905090810190601f1680156113fd5780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b83811015611430578181015183820152602001611418565b50505050905090810190601f16801561145d5780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b83811015611490578181015183820152602001611478565b50505050905090810190601f1680156114bd5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156114dd57600080fd5b5061118a600435612fcc565b3480156114f557600080fd5b5061045d600435613011565b34801561150d57600080fd5b50611365600160a060020a0360043516613056565b34801561152e57600080fd5b5061136560043561324f565b606060008083600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115f75780601f106115cc576101008083540402835291602001916115f7565b820191906000526020600020905b8154815290600101906020018083116115da57829003601f168201915b50505050509050919050565b600061160d613410565b600160a060020a033316600090815260208190526040812060030154608016111561178957506040805160c081018252878152602080820188905291810186905260608101859052600160a060020a033316608082015267ffffffffffffffff841660a08201526005805460018101808355600083905283518051949591948694939093027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001926116c2928492019061345a565b5060208281015180516116db926001850192019061345a565b50604082015180516116f791600284019160209091019061345a565b506060820151805161171391600384019160209091019061345a565b5060808201516004909101805460a09093015167ffffffffffffffff1660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390931673ffffffffffffffffffffffffffffffffffffffff19909416939093179190911691909117905591505b5095945050505050565b600062ffffff85161580159061181557508462ffffff166003846040518082805190602001908083835b602083106117dc5780518252601f1990920191602091820191016117bd565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205462ffffff16929092149150505b15611827576118278484846027613288565b949350505050565b60006004826040518082805190602001908083835b602083106118635780518252601f199092019160209182019101611844565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205462ffffff1615949350505050565b600160a060020a033316600090815260208190526040812060030154610800161180156118ce575060648160ff1611155b156118e357600a805460ff191660ff83161790555b50565b6009545b90565b600160a060020a031660009081526020819052604090206003015461ffff1690565b60006119196134d8565b600160a060020a033316600090815260208190526040812060030154610100161115611ace57506040805160e081018252888152600160a060020a03331660208083019190915267ffffffffffffffff808a1693830193909352606082018890526080820187905260a0820186905291841660c08201526006805460018101808355600083905283518051949591948694939093027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01926119de928492019061345a565b50602082810151600183018054604086015167ffffffffffffffff1660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390941673ffffffffffffffffffffffffffffffffffffffff19909216919091179290921691909117905560608301518051611a67926002850192019061345a565b5060808201518051611a8391600384019160209091019061345a565b5060a08201518051611a9f91600484019160209091019061345a565b5060c091909101516005909101805467ffffffffffffffff191667ffffffffffffffff90921691909117905591505b509695505050505050565b600160a060020a03331660009081526020819052604081206003015461040016118015611b7b57506000600160a060020a03166001836040518082805190602001908083835b60208310611b3e5780518252601f199092019160209182019101611b1f565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a0316929092149150505b15611bf857806004836040518082805190602001908083835b60208310611bb35780518252601f199092019160209182019101611b94565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805462ffffff191662ffffff949094169390931790925550505b5050565b600160a060020a0333166000908152602081905260408120600301546108001611156118e357600a805463ffffffff83166101000264ffffffff001990911617905550565b600160a060020a03331660009081526020819052604081206003015461020016118015611ce357506000600160a060020a03166001836040518082805190602001908083835b60208310611ca65780518252601f199092019160209182019101611c87565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a0316929092149150505b15611bf8578060038360405180828051906020019080838360208310611bb35780518252601f199092019160209182019101611b94565b60006060611d26613513565b600160a060020a0333166000908152602081905260408120600301546010161115611f63578367ffffffffffffffff16604051908082528060200260200182016040528015611d7f578160200160208202803883390190505b5060408051610120810182528d815260208082018e90529181018c9052606081018b9052600160a060020a033316608082015267ffffffffffffffff8a1660a082015288151560c082015260e0810188905261010081018390526008805460018101808355600092909252825180519597509295509093859360099092027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192611e2e92849291019061345a565b506020828101518051611e47926001850192019061345a565b5060408201518051611e6391600284019160209091019061345a565b5060608201518051611e7f91600384019160209091019061345a565b50608082015160048201805460a085015160c0860151151560e060020a027fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff90921660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390961673ffffffffffffffffffffffffffffffffffffffff199094169390931794909416919091171691909117905560e08201518051611f4091600584019160209091019061345a565b506101008201518051611f5d916006840191602090910190613575565b50505092505b505098975050505050505050565b60065490565b6000611f816134d8565b600160a060020a033316600090815260208190526040812060030154610100161115611ace57506040805160e081018252888152600160a060020a03331660208083019190915267ffffffffffffffff808a1693830193909352606082018890526080820187905260a0820186905291841660c082015260078054600181018083556000929092528251805193949293859360069093027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926119de92849291019061345a565b60085490565b60055490565b606080606080600080600060058881548110151561206f57fe5b600091825260209182902060059190910201600481015481546040805160026101006001808616159190910260001901909416819004601f81018890048802830188019093528282529496508695928601948601936003870193600160a060020a0382169360a060020a90920467ffffffffffffffff169291889183018282801561213b5780601f106121105761010080835404028352916020019161213b565b820191906000526020600020905b81548152906001019060200180831161211e57829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a9450925084019050828280156121c95780601f1061219e576101008083540402835291602001916121c9565b820191906000526020600020905b8154815290600101906020018083116121ac57829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a50899450925084019050828280156122575780601f1061222c57610100808354040283529160200191612257565b820191906000526020600020905b81548152906001019060200180831161223a57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959950889450925084019050828280156122e55780601f106122ba576101008083540402835291602001916122e5565b820191906000526020600020905b8154815290600101906020018083116122c857829003601f168201915b505050505092509650965096509650965096505091939550919395565b600160a060020a0381166000908152602081815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156115f75780601f106115cc576101008083540402835291602001916115f7565b6000600382604051808280519060200190808383602083106118635780518252601f199092019160209182019101611844565b60608060608060008060006060600060088a8154811015156123c557fe5b600091825260209182902060099190910201600481015481546040805160026101006001808616159190910260001901909416819004601f81018890048802830188019093528282529496508695928601948601936003870193600160a060020a0382169360a060020a830467ffffffffffffffff169360e060020a90930460ff169260058a019290918a918301828280156124a25780601f10612477576101008083540402835291602001916124a2565b820191906000526020600020905b81548152906001019060200180831161248557829003601f168201915b50508a5460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959d508c9450925084019050828280156125305780601f1061250557610100808354040283529160200191612530565b820191906000526020600020905b81548152906001019060200180831161251357829003601f168201915b5050895460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959c508b9450925084019050828280156125be5780601f10612593576101008083540402835291602001916125be565b820191906000526020600020905b8154815290600101906020018083116125a157829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a94509250840190508282801561264c5780601f106126215761010080835404028352916020019161264c565b820191906000526020600020905b81548152906001019060200180831161262f57829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a50869450925084019050828280156126da5780601f106126af576101008083540402835291602001916126da565b820191906000526020600020905b8154815290600101906020018083116126bd57829003601f168201915b505050505090509850985098509850985098509850985050919395975091939597565b60075490565b60008060088381548110151561271557fe5b6000918252602080832033600160a060020a03168452600992909202909101600701905260409020549392505050565b6060600080606080606060008060068981548110151561276157fe5b60009182526020918290206001600690920201818101546005820154825460408051601f60026000199885161561010002989098019093168790049283018890048802810188019091528181529396508695600160a060020a0384169567ffffffffffffffff60a060020a90950485169590880194600389019460048a01949116928991908301828280156128375780601f1061280c57610100808354040283529160200191612837565b820191906000526020600020905b81548152906001019060200180831161281a57829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959c50899450925084019050828280156128c55780601f1061289a576101008083540402835291602001916128c5565b820191906000526020600020905b8154815290600101906020018083116128a857829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959950889450925084019050828280156129535780601f1061292857610100808354040283529160200191612953565b820191906000526020600020905b81548152906001019060200180831161293657829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156129e15780601f106129b6576101008083540402835291602001916129e1565b820191906000526020600020905b8154815290600101906020018083116129c457829003601f168201915b50505050509150975097509750975097509750975050919395979092949650565b60025490565b600080600884815481101515612a1a57fe5b90600052602060002090600902019050806006018361ffff16815481101515612a3f57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691505b5092915050565b600a5460ff1690565b6060600080606080606060008060078981548110151561276157fe5b600a54610100900463ffffffff1690565b600080600884815481101515612ab757fe5b60009182526020822060099190910201600481015490925060a060020a900467ffffffffffffffff161115612a6857600160a060020a03331660009081526007820160205260409020805484908110612b0c57fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169150612a68565b600160a060020a033316600090815260208181526040822060030154829116811015612e25576008805486908110612b6b57fe5b60009182526020822060099190910201600481015490935060a060020a900467ffffffffffffffff16118015612bbc5750600160a060020a033316600090815260088301602052604090205460ff16155b15612e255750600160a060020a0333166000908152600782016020526040902054801515612cec57600160a060020a033316600090815260078301602090815260408220805460018181018355918452919092206010820401805461ffff8089166002600f909516949094026101000a8481029102199091161790556006840180549091908110612c4957fe5b600091825260209091206008820401805463ffffffff6004600790941684026101000a808304821690950181168502940219169290921790915582015460ff60e060020a9091041615612cc15733600160a060020a031660009081526008830160205260409020805460ff1916841515179055612ce7565b600160a060020a03331660009081526008830160205260409020805460ff191660011790555b612e25565b600482015460e060020a900460ff168015612d575750600160a060020a03331660009081526007830160205260409020805461ffff861691906000198401908110612d3357fe5b60009182526020909120601082040154600f9091166002026101000a900461ffff16105b15612e2557600160a060020a033316600090815260078301602090815260408220805460018181018355918452919092206010820401805461ffff8089166002600f909516949094026101000a8481029102199091161790556006840180549091908110612dc157fe5b600091825260208083206008808404909101805460079094166004026101000a63ffffffff818102198616958290048116979097019096169095029290921790935533600160a060020a03168252840190915260409020805460ff19168415151790555b5050505050565b600062ffffff851615801590612eae57508462ffffff166004846040518082805190602001908083835b60208310612e755780518252601f199092019160209182019101612e56565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205462ffffff16929092149150505b15611827576118278484846103ff613288565b600160a060020a038116600090815260208181526040918290206002908101805484516001821615610100026000190190911692909204601f810184900484028301840190945283825260609391929091908301828280156115f75780601f106115cc576101008083540402835291602001916115f7565b600060608060606000806001876040518082805190602001908083835b60208310612f755780518252601f199092019160209182019101612f56565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169250612fb99150829050613056565b939b929a50909850965090945092505050565b600080600983815481101515612fde57fe5b6000918252602080832033600160a060020a031684526006929092029091016005019052604090205460ff169392505050565b60008060088381548110151561302357fe5b6000918252602080832033600160a060020a031684526009929092029091016008019052604090205460ff169392505050565b600160a060020a038116600090815260208181526040808320600381015481548351601f60026000196001858116156101000291909101909416819004918201889004880283018801909652808252606096879687968a9690958c958795918601949386019361ffff90931692909186918301828280156131185780601f106130ed57610100808354040283529160200191613118565b820191906000526020600020905b8154815290600101906020018083116130fb57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959950889450925084019050828280156131a65780601f1061317b576101008083540402835291602001916131a6565b820191906000526020600020905b81548152906001019060200180831161318957829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156132345780601f1061320957610100808354040283529160200191613234565b820191906000526020600020905b81548152906001019060200180831161321757829003601f168201915b50505050509150955095509550955095505091939590929450565b6000606080606060008060028781548110151561326857fe5b600091825260209091200154600160a060020a03169050612fb981613056565b613290613620565b5060408051608081018252858152602080820186905281830185905261ffff84166060830152600160a060020a03331660009081528082529290922081518051929384936132e1928492019061345a565b5060208281015180516132fa926001850192019061345a565b506040820151805161331691600284019160209091019061345a565b5060608201518160030160006101000a81548161ffff021916908361ffff160217905550905050336001856040518082805190602001908083835b602083106133705780518252601f199092019160209182019101613351565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a0395861617909155600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054909116339094169390931790925550505050505050565b60c060405190810160405280606081526020016060815260200160608152602001606081526020016000600160a060020a03168152602001600067ffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061349b57805160ff19168380011785556134c8565b828001600101855582156134c8579182015b828111156134c85782518255916020019190600101906134ad565b506134d492915061364d565b5090565b6040805160e08101825260608082526000602083018190529282018390528082018190526080820181905260a082015260c081019190915290565b61012060405190810160405280606081526020016060815260200160608152602001606081526020016000600160a060020a03168152602001600067ffffffffffffffff16815260200160001515815260200160608152602001606081525090565b828054828255906000526020600020906007016008900481019282156136145791602002820160005b838211156135e257835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261359e565b80156136125782816101000a81549063ffffffff02191690556004016020816003010492830192600103026135e2565b505b506134d4929150613667565b608060405190810160405280606081526020016060815260200160608152602001600061ffff1681525090565b6118ea91905b808211156134d45760008155600101613653565b6118ea91905b808211156134d457805463ffffffff1916815560010161366d5600a165627a7a72305820a8755cf5e278dc2a84420db241d473484bc8f4346211ddced7e79dc00cfe445d0029";

    public static final String FUNC_GETENCRYPTEDPHONE = "getEncryptedPhone";

    public static final String FUNC_ADDPUBLICITYINFO = "addPublicityInfo";

    public static final String FUNC_REGISTERPROPRIETOR = "registerProprietor";

    public static final String FUNC_HASPROPERTYREGISTRYCODE = "hasPropertyRegistryCode";

    public static final String FUNC_SETSETTLEDRATIO = "setSettledRatio";

    public static final String FUNC_GETAUTHMOTIONCOUNT = "getAuthMotionCount";

    public static final String FUNC_GETAUTHORITY = "getAuthority";

    public static final String FUNC_ADDINCOMEITEM = "addIncomeItem";

    public static final String FUNC_ADDPROPERTYREGISTRYCODE = "addPropertyRegistryCode";

    public static final String FUNC_SETSETTLEDMINCOUNT = "setSettledMinCount";

    public static final String FUNC_ADDPROPRIETORREGISTRYCODE = "addProprietorRegistryCode";

    public static final String FUNC_ADDMOTION = "addMotion";

    public static final String FUNC_GETINCOMEITEMCOUNT = "getIncomeItemCount";

    public static final String FUNC_ADDEXPENSEITEM = "addExpenseItem";

    public static final String FUNC_GETMOTIONCOUNT = "getMotionCount";

    public static final String FUNC_GETPUBLICITYINFOCOUNT = "getPublicityInfoCount";

    public static final String FUNC_GETPUBLICITYINFO = "getPublicityInfo";

    public static final String FUNC_GETENCRYPTEDPWD = "getEncryptedPwd";

    public static final String FUNC_HASPROPRIETORREGISTRYCODE = "hasProprietorRegistryCode";

    public static final String FUNC_GETMOTION = "getMotion";

    public static final String FUNC_GETEXPENSEITEMCOUNT = "getExpenseItemCount";

    public static final String FUNC_GETVOTECOUNT = "getVoteCount";

    public static final String FUNC_GETINCOMEITEM = "getIncomeItem";

    public static final String FUNC_GETUSERCOUNT = "getUserCount";

    public static final String FUNC_GETTOTALVOTE = "getTotalVote";

    public static final String FUNC_GETSETTLEDRATIO = "getSettledRatio";

    public static final String FUNC_GETEXPENSEITEM = "getExpenseItem";

    public static final String FUNC_GETSETTLEDMINCOUNT = "getSettledMinCount";

    public static final String FUNC_GETVOTEINDEX = "getVoteIndex";

    public static final String FUNC_VOTEOPTION = "voteOption";

    public static final String FUNC_REGISTERPROPERTY = "registerProperty";

    public static final String FUNC_GETNICKNAME = "getNickName";

    public static final String FUNC_GETUSERBYPHONE = "getUserByPhone";

    public static final String FUNC_GETAUTHMOTIONVOTE = "getAuthMotionVote";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_GETUSERBYADDR = "getUserByAddr";

    public static final String FUNC_GETUSERBYINDEX = "getUserByIndex";

    @Deprecated
    protected PropertyContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PropertyContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PropertyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PropertyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getEncryptedPhone(String _addr) {
        final Function function = new Function(FUNC_GETENCRYPTEDPHONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addPublicityInfo(String _title, String _content, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDPUBLICITYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_content), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerProprietor(BigInteger _code, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        final Function function = new Function(
                FUNC_REGISTERPROPRIETOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(_code), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasPropertyRegistryCode(String _encryptedPhone) {
        final Function function = new Function(FUNC_HASPROPERTYREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setSettledRatio(BigInteger _settledRatio) {
        final Function function = new Function(
                FUNC_SETSETTLEDRATIO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_settledRatio)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getAuthMotionCount() {
        final Function function = new Function(FUNC_GETAUTHMOTIONCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getAuthority(String _addr) {
        final Function function = new Function(FUNC_GETAUTHORITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addIncomeItem(String _payer, BigInteger _amountInCents, String _desc, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDINCOMEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_payer), 
                new org.web3j.abi.datatypes.generated.Uint64(_amountInCents), 
                new org.web3j.abi.datatypes.Utf8String(_desc), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addPropertyRegistryCode(String _encryptedPhone, BigInteger code) {
        final Function function = new Function(
                FUNC_ADDPROPERTYREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.generated.Uint24(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setSettledMinCount(BigInteger _settledMinCount) {
        final Function function = new Function(
                FUNC_SETSETTLEDMINCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_settledMinCount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addProprietorRegistryCode(String _encryptedPhone, BigInteger code) {
        final Function function = new Function(
                FUNC_ADDPROPRIETORREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.generated.Uint24(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addMotion(String _title, String _content, String _fileHashes, String _fileNames, BigInteger _timestamp, Boolean _multipleVote, String _options, BigInteger _length) {
        final Function function = new Function(
                FUNC_ADDMOTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_content), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp), 
                new org.web3j.abi.datatypes.Bool(_multipleVote), 
                new org.web3j.abi.datatypes.Utf8String(_options), 
                new org.web3j.abi.datatypes.generated.Uint64(_length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getIncomeItemCount() {
        final Function function = new Function(FUNC_GETINCOMEITEMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addExpenseItem(String _payee, BigInteger _amountInCents, String _desc, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDEXPENSEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_payee), 
                new org.web3j.abi.datatypes.generated.Uint64(_amountInCents), 
                new org.web3j.abi.datatypes.Utf8String(_desc), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMotionCount() {
        final Function function = new Function(FUNC_GETMOTIONCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getPublicityInfoCount() {
        final Function function = new Function(FUNC_GETPUBLICITYINFOCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, BigInteger>> getPublicityInfo(BigInteger _idx) {
        final Function function = new Function(FUNC_GETPUBLICITYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, BigInteger>>(
                new Callable<Tuple6<String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> getEncryptedPwd(String _addr) {
        final Function function = new Function(FUNC_GETENCRYPTEDPWD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> hasProprietorRegistryCode(String _encryptedPhone) {
        final Function function = new Function(FUNC_HASPROPRIETORREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>> getMotion(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_GETMOTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, Boolean, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getExpenseItemCount() {
        final Function function = new Function(FUNC_GETEXPENSEITEMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVoteCount(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_GETVOTECOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>> getIncomeItem(BigInteger _idx) {
        final Function function = new Function(FUNC_GETINCOMEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>(
                new Callable<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUserCount() {
        final Function function = new Function(FUNC_GETUSERCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getTotalVote(BigInteger _motionIdx, BigInteger _optionIdx) {
        final Function function = new Function(FUNC_GETTOTALVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint16(_optionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getSettledRatio() {
        final Function function = new Function(FUNC_GETSETTLEDRATIO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>> getExpenseItem(BigInteger _idx) {
        final Function function = new Function(FUNC_GETEXPENSEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>(
                new Callable<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getSettledMinCount() {
        final Function function = new Function(FUNC_GETSETTLEDMINCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVoteIndex(BigInteger _motionIdx, BigInteger idx) {
        final Function function = new Function(FUNC_GETVOTEINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint256(idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> voteOption(BigInteger _motionIdx, BigInteger _optionIdx, Boolean finished) {
        final Function function = new Function(
                FUNC_VOTEOPTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint16(_optionIdx), 
                new org.web3j.abi.datatypes.Bool(finished)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerProperty(BigInteger _code, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        final Function function = new Function(
                FUNC_REGISTERPROPERTY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(_code), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getNickName(String _addr) {
        final Function function = new Function(FUNC_GETNICKNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserByPhone(String _encryptedPhone) {
        final Function function = new Function(FUNC_GETUSERBYPHONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getAuthMotionVote(BigInteger _authMotionIdx) {
        final Function function = new Function(FUNC_GETAUTHMOTIONVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_authMotionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> hasVoted(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_HASVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserByAddr(String _addr) {
        final Function function = new Function(FUNC_GETUSERBYADDR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserByIndex(BigInteger _idx) {
        final Function function = new Function(FUNC_GETUSERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    @Deprecated
    public static PropertyContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PropertyContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PropertyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PropertyContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PropertyContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PropertyContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PropertyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PropertyContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PropertyContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PropertyContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PropertyContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PropertyContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
