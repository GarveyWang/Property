package com.garvey.property.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class PropertyContract extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b506040516200354438038062003544833981016040908152815160208301519183015190830192918201910162000056838383610fff6401000000006200005f810204565b50505062000293565b62000069620001c1565b5060408051608081018252858152602080820186905281830185905261ffff84166060830152600160a060020a0333166000908152808252929092208151805192938493620000bc9284920190620001ee565b506020828101518051620000d79260018501920190620001ee565b5060408201518051620000f5916002840191602090910190620001ee565b5060608201518160030160006101000a81548161ffff021916908361ffff160217905550905050336001856040518082805190602001908083835b60208310620001515780518252601f19909201916020918201910162000130565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092208054600160a060020a031916600160a060020a03949094169390931790925550506002805463ffffffff19811663ffffffff9182166001019091161790555050505050565b608060405190810160405280606081526020016060815260200160608152602001600061ffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023157805160ff191683800117855562000261565b8280016001018555821562000261579182015b828111156200026157825182559160200191906001019062000244565b506200026f92915062000273565b5090565b6200029091905b808211156200026f57600081556001016200027a565b90565b6132a180620002a36000396000f30060806040526004361061014f5763ffffffff60e060020a6000350416625843b481146101545780630c298293146101ea57806311174a291461031b57806336a41f4b146103495780635fabcaaf1461043c5780635fce88fe1461047457806365ec1a8b146105a35780636d51f6a3146106035780637a81bfac146107795780637eea39e31461078e578063835ddcc1146108bd578063848a19d3146108d257806388864949146108e757806389040e5914610acb578063ad15aad214610aec578063b086f1b814610d53578063b2c2f2e814610d68578063b3c37de214610d80578063bad68d0f14610f91578063c53eb5b914610fb0578063d0543ddc14610fc8578063d9dcba3814610fe3578063eace61b214611009578063ead0327d146110e8578063eada609d14611109578063ecca031f146112ce578063f16e4e46146112e6578063f420471414611307575b600080fd5b34801561016057600080fd5b50610175600160a060020a0360043516611367565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101af578181015183820152602001610197565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f657600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261030994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff16935061143092505050565b60408051918252519081900360200190f35b34801561032757600080fd5b506103306115c0565b6040805163ffffffff9092168252519081900360200190f35b34801561035557600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261042895833562ffffff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506115cd9650505050505050565b604080519115158252519081900360200190f35b34801561044857600080fd5b5061045d600160a060020a03600435166116d3565b6040805161ffff9092168252519081900360200190f35b34801561048057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261030994369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b67ffffffffffffffff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff1693506116f592505050565b3480156105af57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104289436949293602493928401919081908401838280828437509497505050923562ffffff1693506118bf92505050565b34801561060f57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261030994369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a893567ffffffffffffffff169a8a83013515159a919990985060609091019650919450908101925081908401838280828437509497505050923567ffffffffffffffff16935061197192505050565b34801561078557600080fd5b50610309611bc8565b34801561079a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261030994369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b67ffffffffffffffff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff169350611bce92505050565b3480156108c957600080fd5b50610309611ca0565b3480156108de57600080fd5b50610309611ca6565b3480156108f357600080fd5b506108ff600435611cac565b60408051600160a060020a038416608082015267ffffffffffffffff831660a082015260c0808252885190820152875190918291602080840192840191606085019160e0860191908d019080838360005b83811015610968578181015183820152602001610950565b50505050905090810190601f1680156109955780820380516001836020036101000a031916815260200191505b5085810384528a5181528a516020918201918c019080838360005b838110156109c85781810151838201526020016109b0565b50505050905090810190601f1680156109f55780820380516001836020036101000a031916815260200191505b5085810383528951815289516020918201918b019080838360005b83811015610a28578181015183820152602001610a10565b50505050905090810190601f168015610a555780820380516001836020036101000a031916815260200191505b5085810382528851815288516020918201918a019080838360005b83811015610a88578181015183820152602001610a70565b50505050905090810190601f168015610ab55780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b348015610ad757600080fd5b50610175600160a060020a0360043516611f59565b348015610af857600080fd5b50610b04600435611fcb565b604051808060200180602001806020018060200189600160a060020a0316600160a060020a031681526020018867ffffffffffffffff1667ffffffffffffffff168152602001871515151581526020018060200186810386528e818151815260200191508051906020019080838360005b83811015610b8d578181015183820152602001610b75565b50505050905090810190601f168015610bba5780820380516001836020036101000a031916815260200191505b5086810385528d5181528d516020918201918f019080838360005b83811015610bed578181015183820152602001610bd5565b50505050905090810190601f168015610c1a5780820380516001836020036101000a031916815260200191505b5086810384528c5181528c516020918201918e019080838360005b83811015610c4d578181015183820152602001610c35565b50505050905090810190601f168015610c7a5780820380516001836020036101000a031916815260200191505b5086810383528b5181528b516020918201918d019080838360005b83811015610cad578181015183820152602001610c95565b50505050905090810190601f168015610cda5780820380516001836020036101000a031916815260200191505b50868103825287518152875160209182019189019080838360005b83811015610d0d578181015183820152602001610cf5565b50505050905090810190601f168015610d3a5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b348015610d5f57600080fd5b50610309612321565b348015610d7457600080fd5b50610309600435612327565b348015610d8c57600080fd5b50610d98600435612369565b604051808060200188600160a060020a0316600160a060020a031681526020018767ffffffffffffffff1667ffffffffffffffff1681526020018060200180602001806020018667ffffffffffffffff1667ffffffffffffffff16815260200185810385528c818151815260200191508051906020019080838360005b83811015610e2d578181015183820152602001610e15565b50505050905090810190601f168015610e5a5780820380516001836020036101000a031916815260200191505b5085810384528951815289516020918201918b019080838360005b83811015610e8d578181015183820152602001610e75565b50505050905090810190601f168015610eba5780820380516001836020036101000a031916815260200191505b5085810383528851815288516020918201918a019080838360005b83811015610eed578181015183820152602001610ed5565b50505050905090810190601f168015610f1a5780820380516001836020036101000a031916815260200191505b50858103825287518152875160209182019189019080838360005b83811015610f4d578181015183820152602001610f35565b50505050905090810190601f168015610f7a5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b348015610f9d57600080fd5b5061033060043561ffff60243516612626565b348015610fbc57600080fd5b50610d9860043561268d565b348015610fd457600080fd5b5061045d6004356024356126a9565b348015610fef57600080fd5b5061100760043561ffff60243516604435151561273b565b005b34801561101557600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261042895833562ffffff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612a309650505050505050565b3480156110f457600080fd5b50610175600160a060020a0360043516612af6565b34801561111557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452611162943694929360249392840191908190840183828082843750949750612b6e9650505050505050565b6040518086600160a060020a0316600160a060020a031681526020018060200180602001806020018561ffff1661ffff168152602001848103845288818151815260200191508051906020019080838360005b838110156111cd5781810151838201526020016111b5565b50505050905090810190601f1680156111fa5780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b8381101561122d578181015183820152602001611215565b50505050905090810190601f16801561125a5780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b8381101561128d578181015183820152602001611275565b50505050905090810190601f1680156112ba5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156112da57600080fd5b50610428600435612c01565b3480156112f257600080fd5b50611162600160a060020a0360043516612c46565b34801561131357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104289436949293602493928401919081908401838280828437509497505050923562ffffff169350612e3f92505050565b606060008083600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114245780601f106113f957610100808354040283529160200191611424565b820191906000526020600020905b81548152906001019060200180831161140757829003601f168201915b50505050509050919050565b600061143a612ffd565b600160a060020a03331660009081526020819052604081206003015460801611156115b657506040805160c081018252878152602080820188905291810186905260608101859052600160a060020a033316608082015267ffffffffffffffff841660a08201526005805460018101808355600083905283518051949591948694939093027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001926114ef9284920190613047565b5060208281015180516115089260018501920190613047565b5060408201518051611524916002840191602090910190613047565b5060608201518051611540916003840191602090910190613047565b5060808201516004909101805460a09093015167ffffffffffffffff1660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390931673ffffffffffffffffffffffffffffffffffffffff19909416939093179190911691909117905591505b5095945050505050565b60025463ffffffff165b90565b600062ffffff85161580159061164f57508462ffffff166003846040518082805190602001908083835b602083106116165780518252601f1990920191602091820191016115f7565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205462ffffff16929092149150505b156116cb576116618484846027612e98565b6003836040518082805190602001908083835b602083106116935780518252601f199092019160209182019101611674565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805462ffffff1916905550505b949350505050565b600160a060020a031660009081526020819052604090206003015461ffff1690565b60006116ff6130c5565b600160a060020a0333166000908152602081905260408120600301546101001611156118b457506040805160e081018252888152600160a060020a03331660208083019190915267ffffffffffffffff808a1693830193909352606082018890526080820187905260a0820186905291841660c08201526006805460018101808355600083905283518051949591948694939093027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01926117c49284920190613047565b50602082810151600183018054604086015167ffffffffffffffff1660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390941673ffffffffffffffffffffffffffffffffffffffff1990921691909117929092169190911790556060830151805161184d9260028501920190613047565b5060808201518051611869916003840191602090910190613047565b5060a08201518051611885916004840191602090910190613047565b5060c091909101516005909101805467ffffffffffffffff191667ffffffffffffffff90921691909117905591505b509695505050505050565b600160a060020a0333166000908152602081905260408120600301546102001681101561196757816004846040518082805190602001908083835b602083106119195780518252601f1990920191602091820191016118fa565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805462ffffff191662ffffff9490941693909317909255506001915061196b9050565b5060005b92915050565b6000606061197d613100565b600160a060020a0333166000908152602081905260408120600301546010161115611bba578367ffffffffffffffff166040519080825280602002602001820160405280156119d6578160200160208202803883390190505b5060408051610120810182528d815260208082018e90529181018c9052606081018b9052600160a060020a033316608082015267ffffffffffffffff8a1660a082015288151560c082015260e0810188905261010081018390526008805460018101808355600092909252825180519597509295509093859360099092027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192611a85928492910190613047565b506020828101518051611a9e9260018501920190613047565b5060408201518051611aba916002840191602090910190613047565b5060608201518051611ad6916003840191602090910190613047565b50608082015160048201805460a085015160c0860151151560e060020a027fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff90921660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390961673ffffffffffffffffffffffffffffffffffffffff199094169390931794909416919091171691909117905560e08201518051611b97916005840191602090910190613047565b506101008201518051611bb4916006840191602090910190613162565b50505092505b505098975050505050505050565b60065490565b6000611bd86130c5565b600160a060020a0333166000908152602081905260408120600301546101001611156118b457506040805160e081018252888152600160a060020a03331660208083019190915267ffffffffffffffff808a1693830193909352606082018890526080820187905260a0820186905291841660c082015260078054600181018083556000929092528251805193949293859360069093027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926117c4928492910190613047565b60085490565b60055490565b6060806060806000806000600588815481101515611cc657fe5b600091825260209182902060059190910201600481015481546040805160026101006001808616159190910260001901909416819004601f81018890048802830188019093528282529496508695928601948601936003870193600160a060020a0382169360a060020a90920467ffffffffffffffff1692918891830182828015611d925780601f10611d6757610100808354040283529160200191611d92565b820191906000526020600020905b815481529060010190602001808311611d7557829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a945092508401905082828015611e205780601f10611df557610100808354040283529160200191611e20565b820191906000526020600020905b815481529060010190602001808311611e0357829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a5089945092508401905082828015611eae5780601f10611e8357610100808354040283529160200191611eae565b820191906000526020600020905b815481529060010190602001808311611e9157829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295995088945092508401905082828015611f3c5780601f10611f1157610100808354040283529160200191611f3c565b820191906000526020600020905b815481529060010190602001808311611f1f57829003601f168201915b505050505092509650965096509650965096505091939550919395565b600160a060020a0381166000908152602081815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156114245780601f106113f957610100808354040283529160200191611424565b60608060608060008060006060600060088a815481101515611fe957fe5b600091825260209182902060099190910201600481015481546040805160026101006001808616159190910260001901909416819004601f81018890048802830188019093528282529496508695928601948601936003870193600160a060020a0382169360a060020a830467ffffffffffffffff169360e060020a90930460ff169260058a019290918a918301828280156120c65780601f1061209b576101008083540402835291602001916120c6565b820191906000526020600020905b8154815290600101906020018083116120a957829003601f168201915b50508a5460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959d508c9450925084019050828280156121545780601f1061212957610100808354040283529160200191612154565b820191906000526020600020905b81548152906001019060200180831161213757829003601f168201915b5050895460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959c508b9450925084019050828280156121e25780601f106121b7576101008083540402835291602001916121e2565b820191906000526020600020905b8154815290600101906020018083116121c557829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a9450925084019050828280156122705780601f1061224557610100808354040283529160200191612270565b820191906000526020600020905b81548152906001019060200180831161225357829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a50869450925084019050828280156122fe5780601f106122d3576101008083540402835291602001916122fe565b820191906000526020600020905b8154815290600101906020018083116122e157829003601f168201915b505050505090509850985098509850985098509850985050919395975091939597565b60075490565b60008060088381548110151561233957fe5b6000918252602080832033600160a060020a03168452600992909202909101600701905260409020549392505050565b6060600080606080606060008060068981548110151561238557fe5b60009182526020918290206001600690920201818101546005820154825460408051601f60026000199885161561010002989098019093168790049283018890048802810188019091528181529396508695600160a060020a0384169567ffffffffffffffff60a060020a90950485169590880194600389019460048a019491169289919083018282801561245b5780601f106124305761010080835404028352916020019161245b565b820191906000526020600020905b81548152906001019060200180831161243e57829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959c50899450925084019050828280156124e95780601f106124be576101008083540402835291602001916124e9565b820191906000526020600020905b8154815290600101906020018083116124cc57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959950889450925084019050828280156125775780601f1061254c57610100808354040283529160200191612577565b820191906000526020600020905b81548152906001019060200180831161255a57829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156126055780601f106125da57610100808354040283529160200191612605565b820191906000526020600020905b8154815290600101906020018083116125e857829003601f168201915b50505050509150975097509750975097509750975050919395979092949650565b60008060088481548110151561263857fe5b90600052602060002090600902019050806006018361ffff1681548110151561265d57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691505b5092915050565b6060600080606080606060008060078981548110151561238557fe5b6000806008848154811015156126bb57fe5b60009182526020822060099190910201600481015490925060a060020a900467ffffffffffffffff16111561268657600160a060020a0333166000908152600782016020526040902080548490811061271057fe5b90600052602060002090601091828204019190066002029054906101000a900461ffff169150612686565b600160a060020a033316600090815260208181526040822060030154829116811015612a2957600880548690811061276f57fe5b60009182526020822060099190910201600481015490935060a060020a900467ffffffffffffffff161180156127c05750600160a060020a033316600090815260088301602052604090205460ff16155b15612a295750600160a060020a03331660009081526007820160205260409020548015156128f057600160a060020a033316600090815260078301602090815260408220805460018181018355918452919092206010820401805461ffff8089166002600f909516949094026101000a848102910219909116179055600684018054909190811061284d57fe5b600091825260209091206008820401805463ffffffff6004600790941684026101000a808304821690950181168502940219169290921790915582015460ff60e060020a90910416156128c55733600160a060020a031660009081526008830160205260409020805460ff19168415151790556128eb565b600160a060020a03331660009081526008830160205260409020805460ff191660011790555b612a29565b600482015460e060020a900460ff16801561295b5750600160a060020a03331660009081526007830160205260409020805461ffff86169190600019840190811061293757fe5b60009182526020909120601082040154600f9091166002026101000a900461ffff16105b15612a2957600160a060020a033316600090815260078301602090815260408220805460018181018355918452919092206010820401805461ffff8089166002600f909516949094026101000a84810291021990911617905560068401805490919081106129c557fe5b600091825260208083206008808404909101805460079094166004026101000a63ffffffff818102198616958290048116979097019096169095029290921790935533600160a060020a03168252840190915260409020805460ff19168415151790555b5050505050565b600062ffffff851615801590612ab257508462ffffff166004846040518082805190602001908083835b60208310612a795780518252601f199092019160209182019101612a5a565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205462ffffff16929092149150505b156116cb57612ac58484846103ff612e98565b600483604051808280519060200190808383602083106116935780518252601f199092019160209182019101611674565b600160a060020a038116600090815260208181526040918290206002908101805484516001821615610100026000190190911692909204601f810184900484028301840190945283825260609391929091908301828280156114245780601f106113f957610100808354040283529160200191611424565b600060608060606000806001876040518082805190602001908083835b60208310612baa5780518252601f199092019160209182019101612b8b565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169250612bee9150829050612c46565b939b929a50909850965090945092505050565b600080600883815481101515612c1357fe5b6000918252602080832033600160a060020a031684526009929092029091016008019052604090205460ff169392505050565b600160a060020a038116600090815260208181526040808320600381015481548351601f60026000196001858116156101000291909101909416819004918201889004880283018801909652808252606096879687968a9690958c958795918601949386019361ffff9093169290918691830182828015612d085780601f10612cdd57610100808354040283529160200191612d08565b820191906000526020600020905b815481529060010190602001808311612ceb57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295995088945092508401905082828015612d965780601f10612d6b57610100808354040283529160200191612d96565b820191906000526020600020905b815481529060010190602001808311612d7957829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015612e245780601f10612df957610100808354040283529160200191612e24565b820191906000526020600020905b815481529060010190602001808311612e0757829003601f168201915b50505050509150955095509550955095505091939590929450565b600160a060020a033316600090815260208190526040812060030154610200168110156119675781600384604051808280519060200190808383602083106119195780518252601f1990920191602091820191016118fa565b612ea061320d565b5060408051608081018252858152602080820186905281830185905261ffff84166060830152600160a060020a0333166000908152808252929092208151805192938493612ef19284920190613047565b506020828101518051612f0a9260018501920190613047565b5060408201518051612f26916002840191602090910190613047565b5060608201518160030160006101000a81548161ffff021916908361ffff160217905550905050336001856040518082805190602001908083835b60208310612f805780518252601f199092019160209182019101612f61565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03949094169390931790925550506002805463ffffffff19811663ffffffff9182166001019091161790555050505050565b60c060405190810160405280606081526020016060815260200160608152602001606081526020016000600160a060020a03168152602001600067ffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061308857805160ff19168380011785556130b5565b828001600101855582156130b5579182015b828111156130b557825182559160200191906001019061309a565b506130c192915061323a565b5090565b6040805160e08101825260608082526000602083018190529282018390528082018190526080820181905260a082015260c081019190915290565b61012060405190810160405280606081526020016060815260200160608152602001606081526020016000600160a060020a03168152602001600067ffffffffffffffff16815260200160001515815260200160608152602001606081525090565b828054828255906000526020600020906007016008900481019282156132015791602002820160005b838211156131cf57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261318b565b80156131ff5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026131cf565b505b506130c1929150613254565b608060405190810160405280606081526020016060815260200160608152602001600061ffff1681525090565b6115ca91905b808211156130c15760008155600101613240565b6115ca91905b808211156130c157805463ffffffff1916815560010161325a5600a165627a7a723058206fc680ba5dd1c4be4726de7444aef145e3274270a77f016354da1ed51df26dc60029";

    public static final String FUNC_GETENCRYPTEDPHONE = "getEncryptedPhone";

    public static final String FUNC_ADDPUBLICITYINFO = "addPublicityInfo";

    public static final String FUNC_GETVOTERCOUNT = "getVoterCount";

    public static final String FUNC_REGISTERPROPERIETOR = "registerProperietor";

    public static final String FUNC_GETAUTHORITY = "getAuthority";

    public static final String FUNC_ADDINCOMEITEM = "addIncomeItem";

    public static final String FUNC_ADDPROPERTYREGISTRYCODE = "addPropertyRegistryCode";

    public static final String FUNC_ADDMOTION = "addMotion";

    public static final String FUNC_GETINCOMEITEMCOUNT = "getIncomeItemCount";

    public static final String FUNC_ADDEXPENSEITEM = "addExpenseItem";

    public static final String FUNC_GETMOTIONCOUNT = "getMotionCount";

    public static final String FUNC_GETPUBLICITYINFOCOUNT = "getPublicityInfoCount";

    public static final String FUNC_GETPUBLICITYINFO = "getPublicityInfo";

    public static final String FUNC_GETENCRYPTEDPWD = "getEncryptedPwd";

    public static final String FUNC_GETMOTION = "getMotion";

    public static final String FUNC_GETEXPENSEITEMCOUNT = "getExpenseItemCount";

    public static final String FUNC_GETVOTECOUNT = "getVoteCount";

    public static final String FUNC_GETINCOMEITEM = "getIncomeItem";

    public static final String FUNC_GETTOTALVOTE = "getTotalVote";

    public static final String FUNC_GETEXPENSEITEM = "getExpenseItem";

    public static final String FUNC_GETVOTEINDEX = "getVoteIndex";

    public static final String FUNC_VOTEOPTION = "voteOption";

    public static final String FUNC_REGISTERPROPERTY = "registerProperty";

    public static final String FUNC_GETNICKNAME = "getNickName";

    public static final String FUNC_GETUSERBYPHONE = "getUserByPhone";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_GETUSERBYADDR = "getUserByAddr";

    public static final String FUNC_ADDPROPERIETORREGISTRYCODE = "addProperietorRegistryCode";

    @Deprecated
    protected PropertyContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PropertyContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PropertyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PropertyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getEncryptedPhone(String _addr) {
        final Function function = new Function(FUNC_GETENCRYPTEDPHONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addPublicityInfo(String _title, String _content, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDPUBLICITYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_content), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getVoterCount() {
        final Function function = new Function(FUNC_GETVOTERCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> registerProperietor(BigInteger _code, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        final Function function = new Function(
                FUNC_REGISTERPROPERIETOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(_code), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getAuthority(String _addr) {
        final Function function = new Function(FUNC_GETAUTHORITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addIncomeItem(String _payer, BigInteger _amountInCents, String _desc, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDINCOMEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_payer), 
                new org.web3j.abi.datatypes.generated.Uint64(_amountInCents), 
                new org.web3j.abi.datatypes.Utf8String(_desc), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addPropertyRegistryCode(String _encryptedPhone, BigInteger code) {
        final Function function = new Function(
                FUNC_ADDPROPERTYREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.generated.Uint24(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addMotion(String _title, String _content, String _fileHashes, String _fileNames, BigInteger _timestamp, Boolean _multipleVote, String _options, BigInteger _length) {
        final Function function = new Function(
                FUNC_ADDMOTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_content), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp), 
                new org.web3j.abi.datatypes.Bool(_multipleVote), 
                new org.web3j.abi.datatypes.Utf8String(_options), 
                new org.web3j.abi.datatypes.generated.Uint64(_length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getIncomeItemCount() {
        final Function function = new Function(FUNC_GETINCOMEITEMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addExpenseItem(String _payee, BigInteger _amountInCents, String _desc, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDEXPENSEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_payee), 
                new org.web3j.abi.datatypes.generated.Uint64(_amountInCents), 
                new org.web3j.abi.datatypes.Utf8String(_desc), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMotionCount() {
        final Function function = new Function(FUNC_GETMOTIONCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getPublicityInfoCount() {
        final Function function = new Function(FUNC_GETPUBLICITYINFOCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, BigInteger>> getPublicityInfo(BigInteger _idx) {
        final Function function = new Function(FUNC_GETPUBLICITYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, BigInteger>>(
                new Callable<Tuple6<String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> getEncryptedPwd(String _addr) {
        final Function function = new Function(FUNC_GETENCRYPTEDPWD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>> getMotion(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_GETMOTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, Boolean, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getExpenseItemCount() {
        final Function function = new Function(FUNC_GETEXPENSEITEMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getVoteCount(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_GETVOTECOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>> getIncomeItem(BigInteger _idx) {
        final Function function = new Function(FUNC_GETINCOMEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>(
                new Callable<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getTotalVote(BigInteger _motionIdx, BigInteger _optionIdx) {
        final Function function = new Function(FUNC_GETTOTALVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint16(_optionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>> getExpenseItem(BigInteger _idx) {
        final Function function = new Function(FUNC_GETEXPENSEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>(
                new Callable<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getVoteIndex(BigInteger _motionIdx, BigInteger idx) {
        final Function function = new Function(FUNC_GETVOTEINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint256(idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> voteOption(BigInteger _motionIdx, BigInteger _optionIdx, Boolean finished) {
        final Function function = new Function(
                FUNC_VOTEOPTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint16(_optionIdx), 
                new org.web3j.abi.datatypes.Bool(finished)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerProperty(BigInteger _code, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        final Function function = new Function(
                FUNC_REGISTERPROPERTY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(_code), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getNickName(String _addr) {
        final Function function = new Function(FUNC_GETNICKNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserByPhone(String _encryptedPhone) {
        final Function function = new Function(FUNC_GETUSERBYPHONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> hasVoted(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_HASVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserByAddr(String _addr) {
        final Function function = new Function(FUNC_GETUSERBYADDR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addProperietorRegistryCode(String _encryptedPhone, BigInteger code) {
        final Function function = new Function(
                FUNC_ADDPROPERIETORREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.generated.Uint24(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PropertyContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PropertyContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PropertyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PropertyContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PropertyContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PropertyContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PropertyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PropertyContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PropertyContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PropertyContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PropertyContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PropertyContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
