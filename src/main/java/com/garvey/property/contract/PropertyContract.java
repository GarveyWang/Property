package com.garvey.property.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class PropertyContract extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b506040516200335338038062003353833981016040908152815160208301519183015190830192918201910162000056838383610fff6401000000006200005f810204565b50505062000293565b62000069620001c1565b5060408051608081018252858152602080820186905281830185905261ffff84166060830152600160a060020a0333166000908152808252929092208151805192938493620000bc9284920190620001ee565b506020828101518051620000d79260018501920190620001ee565b5060408201518051620000f5916002840191602090910190620001ee565b5060608201518160030160006101000a81548161ffff021916908361ffff160217905550905050336001856040518082805190602001908083835b60208310620001515780518252601f19909201916020918201910162000130565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092208054600160a060020a031916600160a060020a03949094169390931790925550506002805463ffffffff19811663ffffffff9182166001019091161790555050505050565b608060405190810160405280606081526020016060815260200160608152602001600061ffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023157805160ff191683800117855562000261565b8280016001018555821562000261579182015b828111156200026157825182559160200191906001019062000244565b506200026f92915062000273565b5090565b6200029091905b808211156200026f57600081556001016200027a565b90565b6130b080620002a36000396000f3006080604052600436106101445763ffffffff60e060020a6000350416625843b481146101495780630c298293146101df57806311174a291461031057806336a41f4b1461033e5780635fabcaaf146104315780635fce88fe1461046957806365ec1a8b1461059857806368da305b146105f85780636d51f6a3146106105780637a81bfac146107865780637eea39e31461079b578063835ddcc1146108ca578063848a19d3146108df57806388864949146108f457806389040e5914610ad8578063905ad1a814610af95780639758919c14610b185780639ff898b414610b30578063ad15aad214610b51578063b086f1b814610db8578063b3c37de214610dcd578063c53eb5b914610fde578063eace61b214610ff6578063ead0327d146110d5578063eada609d146110f6578063f16e4e46146112bb578063f4204714146112dc575b600080fd5b34801561015557600080fd5b5061016a600160a060020a036004351661133c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a457818101518382015260200161018c565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101eb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102fe94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff16935061140592505050565b60408051918252519081900360200190f35b34801561031c57600080fd5b50610325611595565b6040805163ffffffff9092168252519081900360200190f35b34801561034a57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261041d95833562ffffff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506115a29650505050505050565b604080519115158252519081900360200190f35b34801561043d57600080fd5b50610452600160a060020a03600435166116a8565b6040805161ffff9092168252519081900360200190f35b34801561047557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102fe94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b67ffffffffffffffff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff1693506116ca92505050565b3480156105a457600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261041d9436949293602493928401919081908401838280828437509497505050923562ffffff16935061189492505050565b34801561060457600080fd5b5061041d600435611946565b34801561061c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102fe94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a893567ffffffffffffffff169a8a83013515159a919990985060609091019650919450908101925081908401838280828437509497505050923567ffffffffffffffff16935061198d92505050565b34801561079257600080fd5b506102fe611be3565b3480156107a757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102fe94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b67ffffffffffffffff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050923567ffffffffffffffff169350611be992505050565b3480156108d657600080fd5b506102fe611cbb565b3480156108eb57600080fd5b506102fe611cc1565b34801561090057600080fd5b5061090c600435611cc7565b60408051600160a060020a038416608082015267ffffffffffffffff831660a082015260c0808252885190820152875190918291602080840192840191606085019160e0860191908d019080838360005b8381101561097557818101518382015260200161095d565b50505050905090810190601f1680156109a25780820380516001836020036101000a031916815260200191505b5085810384528a5181528a516020918201918c019080838360005b838110156109d55781810151838201526020016109bd565b50505050905090810190601f168015610a025780820380516001836020036101000a031916815260200191505b5085810383528951815289516020918201918b019080838360005b83811015610a35578181015183820152602001610a1d565b50505050905090810190601f168015610a625780820380516001836020036101000a031916815260200191505b5085810382528851815288516020918201918a019080838360005b83811015610a95578181015183820152602001610a7d565b50505050905090810190601f168015610ac25780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b348015610ae457600080fd5b5061016a600160a060020a0360043516611f74565b348015610b0557600080fd5b5061032560043561ffff60243516611fe6565b348015610b2457600080fd5b506102fe60043561204c565b348015610b3c57600080fd5b50610b4f60043561ffff60243516612079565b005b348015610b5d57600080fd5b50610b6960043561224f565b604051808060200180602001806020018060200189600160a060020a0316600160a060020a031681526020018867ffffffffffffffff1667ffffffffffffffff168152602001871515151581526020018060200186810386528e818151815260200191508051906020019080838360005b83811015610bf2578181015183820152602001610bda565b50505050905090810190601f168015610c1f5780820380516001836020036101000a031916815260200191505b5086810385528d5181528d516020918201918f019080838360005b83811015610c52578181015183820152602001610c3a565b50505050905090810190601f168015610c7f5780820380516001836020036101000a031916815260200191505b5086810384528c5181528c516020918201918e019080838360005b83811015610cb2578181015183820152602001610c9a565b50505050905090810190601f168015610cdf5780820380516001836020036101000a031916815260200191505b5086810383528b5181528b516020918201918d019080838360005b83811015610d12578181015183820152602001610cfa565b50505050905090810190601f168015610d3f5780820380516001836020036101000a031916815260200191505b50868103825287518152875160209182019189019080838360005b83811015610d72578181015183820152602001610d5a565b50505050905090810190601f168015610d9f5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b348015610dc457600080fd5b506102fe6125a5565b348015610dd957600080fd5b50610de56004356125ab565b604051808060200188600160a060020a0316600160a060020a031681526020018767ffffffffffffffff1667ffffffffffffffff1681526020018060200180602001806020018667ffffffffffffffff1667ffffffffffffffff16815260200185810385528c818151815260200191508051906020019080838360005b83811015610e7a578181015183820152602001610e62565b50505050905090810190601f168015610ea75780820380516001836020036101000a031916815260200191505b5085810384528951815289516020918201918b019080838360005b83811015610eda578181015183820152602001610ec2565b50505050905090810190601f168015610f075780820380516001836020036101000a031916815260200191505b5085810383528851815288516020918201918a019080838360005b83811015610f3a578181015183820152602001610f22565b50505050905090810190601f168015610f675780820380516001836020036101000a031916815260200191505b50858103825287518152875160209182019189019080838360005b83811015610f9a578181015183820152602001610f82565b50505050905090810190601f168015610fc75780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b348015610fea57600080fd5b50610de5600435612868565b34801561100257600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261041d95833562ffffff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506128849650505050505050565b3480156110e157600080fd5b5061016a600160a060020a036004351661294a565b34801561110257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261114f9436949293602493928401919081908401838280828437509497506129c29650505050505050565b6040518086600160a060020a0316600160a060020a031681526020018060200180602001806020018561ffff1661ffff168152602001848103845288818151815260200191508051906020019080838360005b838110156111ba5781810151838201526020016111a2565b50505050905090810190601f1680156111e75780820380516001836020036101000a031916815260200191505b50848103835287518152875160209182019189019080838360005b8381101561121a578181015183820152602001611202565b50505050905090810190601f1680156112475780820380516001836020036101000a031916815260200191505b50848103825286518152865160209182019188019080838360005b8381101561127a578181015183820152602001611262565b50505050905090810190601f1680156112a75780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156112c757600080fd5b5061114f600160a060020a0360043516612a55565b3480156112e857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261041d9436949293602493928401919081908401838280828437509497505050923562ffffff169350612c4e92505050565b606060008083600160a060020a0316600160a060020a031681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113f95780601f106113ce576101008083540402835291602001916113f9565b820191906000526020600020905b8154815290600101906020018083116113dc57829003601f168201915b50505050509050919050565b600061140f612e0c565b600160a060020a033316600090815260208190526040812060030154608016111561158b57506040805160c081018252878152602080820188905291810186905260608101859052600160a060020a033316608082015267ffffffffffffffff841660a08201526005805460018101808355600083905283518051949591948694939093027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001926114c49284920190612e56565b5060208281015180516114dd9260018501920190612e56565b50604082015180516114f9916002840191602090910190612e56565b5060608201518051611515916003840191602090910190612e56565b5060808201516004909101805460a09093015167ffffffffffffffff1660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390931673ffffffffffffffffffffffffffffffffffffffff19909416939093179190911691909117905591505b5095945050505050565b60025463ffffffff165b90565b600062ffffff85161580159061162457508462ffffff166003846040518082805190602001908083835b602083106115eb5780518252601f1990920191602091820191016115cc565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205462ffffff16929092149150505b156116a0576116368484846027612ca7565b6003836040518082805190602001908083835b602083106116685780518252601f199092019160209182019101611649565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805462ffffff1916905550505b949350505050565b600160a060020a031660009081526020819052604090206003015461ffff1690565b60006116d4612ed4565b600160a060020a03331660009081526020819052604081206003015461010016111561188957506040805160e081018252888152600160a060020a03331660208083019190915267ffffffffffffffff808a1693830193909352606082018890526080820187905260a0820186905291841660c08201526006805460018101808355600083905283518051949591948694939093027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01926117999284920190612e56565b50602082810151600183018054604086015167ffffffffffffffff1660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390941673ffffffffffffffffffffffffffffffffffffffff199092169190911792909216919091179055606083015180516118229260028501920190612e56565b506080820151805161183e916003840191602090910190612e56565b5060a0820151805161185a916004840191602090910190612e56565b5060c091909101516005909101805467ffffffffffffffff191667ffffffffffffffff90921691909117905591505b509695505050505050565b600160a060020a0333166000908152602081905260408120600301546102001681101561193c57816004846040518082805190602001908083835b602083106118ee5780518252601f1990920191602091820191016118cf565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805462ffffff191662ffffff949094169390931790925550600191506119409050565b5060005b92915050565b60008060088381548110151561195857fe5b6000918252602080832033600160a060020a031684526008929092029091016007019052604081205461ffff16119392505050565b60006060611999612f0f565b600160a060020a0333166000908152602081905260408120600301546010161115611bd5578367ffffffffffffffff166040519080825280602002602001820160405280156119f2578160200160208202803883390190505b5060408051610120810182528d815260208082018e90529181018c9052606081018b9052600160a060020a033316608082015267ffffffffffffffff8a1660a082015288151560c082015260e0810188905261010081018390526008805460018101808355600083905283518051969850939650948694919092027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192611aa09284929190910190612e56565b506020828101518051611ab99260018501920190612e56565b5060408201518051611ad5916002840191602090910190612e56565b5060608201518051611af1916003840191602090910190612e56565b50608082015160048201805460a085015160c0860151151560e060020a027fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff67ffffffffffffffff90921660a060020a027bffffffffffffffff000000000000000000000000000000000000000019600160a060020a0390961673ffffffffffffffffffffffffffffffffffffffff199094169390931794909416919091171691909117905560e08201518051611bb2916005840191602090910190612e56565b506101008201518051611bcf916006840191602090910190612f71565b50505092505b505098975050505050505050565b60065490565b6000611bf3612ed4565b600160a060020a03331660009081526020819052604081206003015461010016111561188957506040805160e081018252888152600160a060020a03331660208083019190915267ffffffffffffffff808a1693830193909352606082018890526080820187905260a0820186905291841660c082015260078054600181018083556000929092528251805193949293859360069093027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880192611799928492910190612e56565b60085490565b60055490565b6060806060806000806000600588815481101515611ce157fe5b600091825260209182902060059190910201600481015481546040805160026101006001808616159190910260001901909416819004601f81018890048802830188019093528282529496508695928601948601936003870193600160a060020a0382169360a060020a90920467ffffffffffffffff1692918891830182828015611dad5780601f10611d8257610100808354040283529160200191611dad565b820191906000526020600020905b815481529060010190602001808311611d9057829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a945092508401905082828015611e3b5780601f10611e1057610100808354040283529160200191611e3b565b820191906000526020600020905b815481529060010190602001808311611e1e57829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a5089945092508401905082828015611ec95780601f10611e9e57610100808354040283529160200191611ec9565b820191906000526020600020905b815481529060010190602001808311611eac57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295995088945092508401905082828015611f575780601f10611f2c57610100808354040283529160200191611f57565b820191906000526020600020905b815481529060010190602001808311611f3a57829003601f168201915b505050505092509650965096509650965096505091939550919395565b600160a060020a0381166000908152602081815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156113f95780601f106113ce576101008083540402835291602001916113f9565b600080600884815481101515611ff857fe5b90600052602060002090600802019050806006018361ffff1681548110151561201d57fe5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1691505092915050565b60008060088381548110151561205e57fe5b60009182526020909120600660089092020101549392505050565b600160a060020a0333166000908152602081815260408220600301541681101561224a5760088054849081106120ab57fe5b60009182526020822060089190910201600481015490925060a060020a900467ffffffffffffffff16111561224a57600481015460e060020a900460ff1680156121165750600160a060020a033316600090815260078201602052604090205461ffff908116908316115b15612196576001816006018361ffff1681548110151561213257fe5b600091825260208083206008830401805463ffffffff60046007958616026101000a8083048216909701811687029602191694909417909355600160a060020a0333168252830190915260409020805461ffff841661ffff1990911617905561224a565b600481015460e060020a900460ff161580156121ce5750600160a060020a033316600090815260078201602052604090205461ffff16155b1561224a576001816006018361ffff168154811015156121ea57fe5b600091825260208083206008830401805463ffffffff60046007958616026101000a8083048216909701811687029602191694909417909355600160a060020a0333168252830190915260409020805461ffff841661ffff199091161790555b505050565b60608060608060008060006060600060088a81548110151561226d57fe5b600091825260209182902060089190910201600481015481546040805160026101006001808616159190910260001901909416819004601f81018890048802830188019093528282529496508695928601948601936003870193600160a060020a0382169360a060020a830467ffffffffffffffff169360e060020a90930460ff169260058a019290918a9183018282801561234a5780601f1061231f5761010080835404028352916020019161234a565b820191906000526020600020905b81548152906001019060200180831161232d57829003601f168201915b50508a5460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959d508c9450925084019050828280156123d85780601f106123ad576101008083540402835291602001916123d8565b820191906000526020600020905b8154815290600101906020018083116123bb57829003601f168201915b5050895460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959c508b9450925084019050828280156124665780601f1061243b57610100808354040283529160200191612466565b820191906000526020600020905b81548152906001019060200180831161244957829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a9450925084019050828280156124f45780601f106124c9576101008083540402835291602001916124f4565b820191906000526020600020905b8154815290600101906020018083116124d757829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959a50869450925084019050828280156125825780601f1061255757610100808354040283529160200191612582565b820191906000526020600020905b81548152906001019060200180831161256557829003601f168201915b505050505090509850985098509850985098509850985050919395975091939597565b60075490565b606060008060608060606000806006898154811015156125c757fe5b60009182526020918290206001600690920201818101546005820154825460408051601f60026000199885161561010002989098019093168790049283018890048802810188019091528181529396508695600160a060020a0384169567ffffffffffffffff60a060020a90950485169590880194600389019460048a019491169289919083018282801561269d5780601f106126725761010080835404028352916020019161269d565b820191906000526020600020905b81548152906001019060200180831161268057829003601f168201915b5050875460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959c508994509250840190508282801561272b5780601f106127005761010080835404028352916020019161272b565b820191906000526020600020905b81548152906001019060200180831161270e57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959950889450925084019050828280156127b95780601f1061278e576101008083540402835291602001916127b9565b820191906000526020600020905b81548152906001019060200180831161279c57829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156128475780601f1061281c57610100808354040283529160200191612847565b820191906000526020600020905b81548152906001019060200180831161282a57829003601f168201915b50505050509150975097509750975097509750975050919395979092949650565b606060008060608060606000806007898154811015156125c757fe5b600062ffffff85161580159061290657508462ffffff166004846040518082805190602001908083835b602083106128cd5780518252601f1990920191602091820191016128ae565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205462ffffff16929092149150505b156116a0576129198484846103ff612ca7565b600483604051808280519060200190808383602083106116685780518252601f199092019160209182019101611649565b600160a060020a038116600090815260208181526040918290206002908101805484516001821615610100026000190190911692909204601f810184900484028301840190945283825260609391929091908301828280156113f95780601f106113ce576101008083540402835291602001916113f9565b600060608060606000806001876040518082805190602001908083835b602083106129fe5780518252601f1990920191602091820191016129df565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054600160a060020a03169250612a429150829050612a55565b939b929a50909850965090945092505050565b600160a060020a038116600090815260208181526040808320600381015481548351601f60026000196001858116156101000291909101909416819004918201889004880283018801909652808252606096879687968a9690958c958795918601949386019361ffff9093169290918691830182828015612b175780601f10612aec57610100808354040283529160200191612b17565b820191906000526020600020905b815481529060010190602001808311612afa57829003601f168201915b5050865460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295995088945092508401905082828015612ba55780601f10612b7a57610100808354040283529160200191612ba5565b820191906000526020600020905b815481529060010190602001808311612b8857829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815295985087945092508401905082828015612c335780601f10612c0857610100808354040283529160200191612c33565b820191906000526020600020905b815481529060010190602001808311612c1657829003601f168201915b50505050509150955095509550955095505091939590929450565b600160a060020a0333166000908152602081905260408120600301546102001681101561193c5781600384604051808280519060200190808383602083106118ee5780518252601f1990920191602091820191016118cf565b612caf61301c565b5060408051608081018252858152602080820186905281830185905261ffff84166060830152600160a060020a0333166000908152808252929092208151805192938493612d009284920190612e56565b506020828101518051612d199260018501920190612e56565b5060408201518051612d35916002840191602090910190612e56565b5060608201518160030160006101000a81548161ffff021916908361ffff160217905550905050336001856040518082805190602001908083835b60208310612d8f5780518252601f199092019160209182019101612d70565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03949094169390931790925550506002805463ffffffff19811663ffffffff9182166001019091161790555050505050565b60c060405190810160405280606081526020016060815260200160608152602001606081526020016000600160a060020a03168152602001600067ffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e9757805160ff1916838001178555612ec4565b82800160010185558215612ec4579182015b82811115612ec4578251825591602001919060010190612ea9565b50612ed0929150613049565b5090565b6040805160e08101825260608082526000602083018190529282018390528082018190526080820181905260a082015260c081019190915290565b61012060405190810160405280606081526020016060815260200160608152602001606081526020016000600160a060020a03168152602001600067ffffffffffffffff16815260200160001515815260200160608152602001606081525090565b828054828255906000526020600020906007016008900481019282156130105791602002820160005b83821115612fde57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302612f9a565b801561300e5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302612fde565b505b50612ed0929150613063565b608060405190810160405280606081526020016060815260200160608152602001600061ffff1681525090565b61159f91905b80821115612ed0576000815560010161304f565b61159f91905b80821115612ed057805463ffffffff191681556001016130695600a165627a7a72305820d28510f928e767b8bea175ba9cf1236123dffbfe19cd2c4b08ac90158b08fdb60029";

    public static final String FUNC_GETENCRYPTEDPHONE = "getEncryptedPhone";

    public static final String FUNC_ADDPUBLICITYINFO = "addPublicityInfo";

    public static final String FUNC_GETVOTERCOUNT = "getVoterCount";

    public static final String FUNC_REGISTERPROPERIETOR = "registerProperietor";

    public static final String FUNC_GETAUTHORITY = "getAuthority";

    public static final String FUNC_ADDINCOMEITEM = "addIncomeItem";

    public static final String FUNC_ADDPROPERTYREGISTRYCODE = "addPropertyRegistryCode";

    public static final String FUNC_HASVOTE = "hasVote";

    public static final String FUNC_ADDMOTION = "addMotion";

    public static final String FUNC_GETINCOMEITEMCOUNT = "getIncomeItemCount";

    public static final String FUNC_ADDEXPENSEITEM = "addExpenseItem";

    public static final String FUNC_GETMOTIONCOUNT = "getMotionCount";

    public static final String FUNC_GETPUBLICITYINFOCOUNT = "getPublicityInfoCount";

    public static final String FUNC_GETPUBLICITYINFO = "getPublicityInfo";

    public static final String FUNC_GETENCRYPTEDPWD = "getEncryptedPwd";

    public static final String FUNC_GETVOTE = "getVote";

    public static final String FUNC_GETOPTIONLENGTH = "getOptionLength";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_GETMOTION = "getMotion";

    public static final String FUNC_GETEXPENSEITEMCOUNT = "getExpenseItemCount";

    public static final String FUNC_GETINCOMEITEM = "getIncomeItem";

    public static final String FUNC_GETEXPENSEITEM = "getExpenseItem";

    public static final String FUNC_REGISTERPROPERTY = "registerProperty";

    public static final String FUNC_GETNICKNAME = "getNickName";

    public static final String FUNC_GETUSERBYPHONE = "getUserByPhone";

    public static final String FUNC_GETUSERBYADDR = "getUserByAddr";

    public static final String FUNC_ADDPROPERIETORREGISTRYCODE = "addProperietorRegistryCode";

    @Deprecated
    protected PropertyContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PropertyContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PropertyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PropertyContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getEncryptedPhone(String _addr) {
        final Function function = new Function(FUNC_GETENCRYPTEDPHONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addPublicityInfo(String _title, String _content, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDPUBLICITYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_content), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getVoterCount() {
        final Function function = new Function(FUNC_GETVOTERCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> registerProperietor(BigInteger _code, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        final Function function = new Function(
                FUNC_REGISTERPROPERIETOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(_code), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getAuthority(String _addr) {
        final Function function = new Function(FUNC_GETAUTHORITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addIncomeItem(String _payer, BigInteger _amountInCents, String _desc, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDINCOMEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_payer), 
                new org.web3j.abi.datatypes.generated.Uint64(_amountInCents), 
                new org.web3j.abi.datatypes.Utf8String(_desc), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addPropertyRegistryCode(String _encryptedPhone, BigInteger code) {
        final Function function = new Function(
                FUNC_ADDPROPERTYREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.generated.Uint24(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasVote(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_HASVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> addMotion(String _title, String _content, String _fileHashes, String _fileNames, BigInteger _timestamp, Boolean _multipleVote, String _options, BigInteger _length) {
        final Function function = new Function(
                FUNC_ADDMOTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_title), 
                new org.web3j.abi.datatypes.Utf8String(_content), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp), 
                new org.web3j.abi.datatypes.Bool(_multipleVote), 
                new org.web3j.abi.datatypes.Utf8String(_options), 
                new org.web3j.abi.datatypes.generated.Uint64(_length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getIncomeItemCount() {
        final Function function = new Function(FUNC_GETINCOMEITEMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addExpenseItem(String _payee, BigInteger _amountInCents, String _desc, String _fileHashes, String _fileNames, BigInteger _timestamp) {
        final Function function = new Function(
                FUNC_ADDEXPENSEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_payee), 
                new org.web3j.abi.datatypes.generated.Uint64(_amountInCents), 
                new org.web3j.abi.datatypes.Utf8String(_desc), 
                new org.web3j.abi.datatypes.Utf8String(_fileHashes), 
                new org.web3j.abi.datatypes.Utf8String(_fileNames), 
                new org.web3j.abi.datatypes.generated.Uint64(_timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMotionCount() {
        final Function function = new Function(FUNC_GETMOTIONCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getPublicityInfoCount() {
        final Function function = new Function(FUNC_GETPUBLICITYINFOCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, String, String, String, String, BigInteger>> getPublicityInfo(BigInteger _idx) {
        final Function function = new Function(FUNC_GETPUBLICITYINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, BigInteger>>(
                new Callable<Tuple6<String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> getEncryptedPwd(String _addr) {
        final Function function = new Function(FUNC_GETENCRYPTEDPWD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getVote(BigInteger _motionIdx, BigInteger _optionIdx) {
        final Function function = new Function(FUNC_GETVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint16(_optionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getOptionLength(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_GETOPTIONLENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> vote(BigInteger _motionIdx, BigInteger _optionIdx) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx), 
                new org.web3j.abi.datatypes.generated.Uint16(_optionIdx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>> getMotion(BigInteger _motionIdx) {
        final Function function = new Function(FUNC_GETMOTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_motionIdx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, Boolean, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getExpenseItemCount() {
        final Function function = new Function(FUNC_GETEXPENSEITEMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>> getIncomeItem(BigInteger _idx) {
        final Function function = new Function(FUNC_GETINCOMEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>(
                new Callable<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>> getExpenseItem(BigInteger _idx) {
        final Function function = new Function(FUNC_GETEXPENSEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>(
                new Callable<Tuple7<String, String, BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerProperty(BigInteger _code, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        final Function function = new Function(
                FUNC_REGISTERPROPERTY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint24(_code), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getNickName(String _addr) {
        final Function function = new Function(FUNC_GETNICKNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserByPhone(String _encryptedPhone) {
        final Function function = new Function(FUNC_GETUSERBYPHONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> getUserByAddr(String _addr) {
        final Function function = new Function(FUNC_GETUSERBYADDR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addProperietorRegistryCode(String _encryptedPhone, BigInteger code) {
        final Function function = new Function(
                FUNC_ADDPROPERIETORREGISTRYCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.generated.Uint24(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static PropertyContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PropertyContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PropertyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PropertyContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PropertyContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PropertyContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PropertyContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PropertyContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PropertyContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<PropertyContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PropertyContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<PropertyContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _encryptedPwd, String _encryptedPhone, String _nickName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_encryptedPwd), 
                new org.web3j.abi.datatypes.Utf8String(_encryptedPhone), 
                new org.web3j.abi.datatypes.Utf8String(_nickName)));
        return deployRemoteCall(PropertyContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
